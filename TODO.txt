X Limit paddle movement to screen edge
X Scale everything to the window in render()
X Implement ball
X Implement blocks and their collision detection
X Implement the basic game - a game over screen, a game win screen
X Implement sound effects
X Implement pausing
X Implement instructions
X Implement Menu screen and game restarting
X Implement music
X Implement resolution black rectangles
X implement the settings screen
X dataclass settings
X Settings improvements
    have a graphics settings class inside settings
    don't mutate game.settings through graphics
    in constants have a default settings object
    clean up new settings issue
X Remove balls list
X Implement invariant checker
X Color is-bright function
X Implement sets in keyboard_state
X Fix the paddle collision bug
X Implement a Colours class
X Implement "Press L to Launch"
X Implement lives
Fix hardcoding (settings screen, block generation, etc.)
Fix screen_content being non-interactive
Make the damn music match

POSSIBLE FUTURE FEATURES:
Block "Health"
Block "Features," like "protects those around it", "heals those around it", "revives after some time", "Explodes and destroys nearby blocks if hit but only if hit before timer runs out"
Ability to aim first launch, with some spread
"Powerups," like temporary piercings, additional lives, etc.
"Skills," like "last chance: revive if few enough blocks left" or "piercing on first shot"
Saving progress
Better UI

SEPARATION ISSUES:
X can't get color out of block
    Fine for now; actual solution is a "graphical shadow"

BUGS:
X Flickering pause screen
    Fixed by rendering the pause screen only once, at the start, and only running input handling in the pause loop
X Paddle collision wonky if on side
For one frame, the paddle shows the ball on it even when no lives are left
When starting from new_life, paddle collision sound is heard

QUESTIONS:
X Isn't rendering only the changing parts of a screen more "efficient"?
X GameObjects inheritance
X Should I use sets in the input handler? Is that better?
X Ask about "backwards programming"
X One "Data" class can suffice for settings, constants etc. Is this inheritance? Can I just use less classes?
Awkwardness : Storing lives inside paddle
Awkwardness : GameState reaching inside core game state to set ball velocity when launched
